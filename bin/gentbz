#!/bin/bash
source $(dirname $0)/../src/bashlibs-base/lib/header.sh

package_source_dir() {
    echo $(args) \
        | grep -q '^/' \
        && echo $(args) \
        || echo $(working_directory)/$(args)
}

cmdline() {
    [[ ! -f $(package_source_dir)/CMakeLists.txt ]] \
        && echo "You need to provide source dir" \
        && exit 1

    [[ ! -d $(package_source_dir) ]] \
        && echo "\"$(args)\": is not a directory!" \
        && exit 1
}

tmp_dir() {
    echo /tmp/$(progname)
}

workdir() {
    local workdir=$(tmp_dir)/$(get_tbz_filename_prefix)

    [[ -d $workdir ]] \
        || mkdir -p $workdir

    echo $workdir
}

get_cmake_project_name() {
	grep -i "project" $(package_source_dir)/CMakeLists.txt \
		| head -1 \
		| cut -d '(' -f 2 | cut -d ')' -f 1 \
		| tr ' ' '.'
}

get_dir_project_name() {
	basename $(package_source_dir)
}

get_app_version() {
	cat $(package_source_dir)/version
}

get_tbz_filename_prefix() {
	echo $(get_cmake_project_name)-$(get_app_version)-Source
}

get_tbz_filename() {
	echo $(get_tbz_filename_prefix).tar.bz2
}

gen_changelog() {
	cd $(package_source_dir)
	git --no-pager log . > ChangeLog
	cd - > /dev/null 2>&1
}

clean_tmp_dirs() {
    [[ $(tmp_dir) =~ /tmp/ ]] \
        && [[ -d $(tmp_dir) ]] \
        && rm -Rf $(tmp_dir)
}

copy_sources_to_workdir() {
    cd $(package_source_dir)
    rsync -r --exclude=*swp * $(workdir)/
    cd - > /dev/null 2>&1
}

tar_sources() {
    local f=/usr/portage/distfiles/$(get_tbz_filename)

    cd $(tmp_dir)
	tar cjf $f * \
	    && echo "File $f created."
    cd - > /dev/null 2>&1
}

keep_package() {
    local archive=$(progdir)/../gentoo/distfiles

    mkdir -p $archive
	cp /usr/portage/distfiles/$(get_tbz_filename) $archive
}

main() {
    cmdline
	clean_tmp_dirs
	gen_changelog
    copy_sources_to_workdir
    tar_sources
    keep_package
	clean_tmp_dirs
}
main
