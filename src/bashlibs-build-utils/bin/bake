#!/bin/bash
REAL_DIR=

my_real_dir() {
    if [[ -z $REAL_DIR ]]
    then
        REAL_DIR=$(dirname $(realpath $0))
        echo $REAL_DIR
    else
        echo $REAL_DIR
    fi
}

source $(my_real_dir)/bake-intree-init > /dev/null 2>&1 \
    || $(bashlibs --load-base)
include bake.sh
include bake_gentoo.sh
include bake_debian.sh
include package_build.sh
include deb_repository.sh
include bake_cmdline.sh
include bake_cmake.sh
include verbose.sh
VERBOSE=2

if_defined_declare_readonly() {
    local var_name=$1

    [[ -n ${!var_name} ]] \
        && readonly $var_name
}

project_name() {
    echo $PROJECT_NAME
}

repository_color() {
    local rep_name=$1
    local rep_color_var=REPOSITORY_COLOR_$rep_name

    echo ${!rep_color_var}
}

repositories_names_of_project() {
    local project_path=$1

    PROJECT_PATH=$project_path
    load_configuration_files > /dev/null 2>&1

    local i=

    for i in $REPOSITORIES_NAMES
    do
        echo -n "$(color $(repository_color $i))"
        echo -n "$i"
        echo -n "$(no_color) "
    done \
        | sort \
        | sed 's/ /,/g' \
        | sed 's/,$//'

    echo

    PROJECT_PATH=
}

package_version() {
    local project_path=$1

    cat $project_path/version
}

list_projects() {
    local i=

    for i in $(all_cmake_project_files)
    do
        local project_path=$(dirname $i)
        echo -n "$(extract_project_name_from_cmake_file $i)-"
        echo -n "$(package_version $project_path) "
        echo -n "$project_path "
        echo "$(repositories_names_of_project $project_path)"
    done \
        | sort \
        | column -t

    exit
}

target_build_host() {
    echo $TARGET_BUILD_HOST
}

target_os_is_gentoo() {
    run_remote [[ -f /etc/gentoo-release ]]
}

target_os_is_ubuntu() {
    run_remote [[ -f /etc/lsb-release ]]
}

target_os() {
    target_os_is_gentoo \
        && echo gentoo

    target_os_is_ubuntu \
        && echo ubuntu
}

target_os_with_color() {
    target_os_is_gentoo \
        && echo $(color purple)gentoo$(no_color)

    target_os_is_ubuntu \
        && echo $(color yellow)ubuntu$(no_color)
}

project_path() {
    echo $PROJECT_PATH
}

package_type() {
    target_os_is_gentoo \
        && echo tbz
    target_os_is_ubuntu \
        && echo deb
}

cmake_options() {
    echo $CMAKE_OPTIONS
}

portage_tree() {
    echo $PORTAGE_TREE
}

portage_tree_name() {
    echo $PORTAGE_TREE_NAME
}

gentoo_local_portage_path() {
    echo /usr/local/portage-$(portage_tree_name)
}

building_for_gentoo() {
    [[ $(package_type) == tbz ]]
}

check_gentoo_commands() {
    if building_for_gentoo ; then
        [[ -z $(portage_tree) ]] \
            && eexit "parameter --portage-tree must be set"
        [[ -z $(portage_tree_name) ]] \
            && eexit "parameter --portage-tree-name must be set"
    fi
}

repositories_names() {
    local i

    for i in archive $REPOSITORIES_NAMES
    do
        echo -n "${i}-repository "
    done
}

im_root() {
    [[ $(whoami) == root ]]
}

repository_dir_name() {
    echo repositories
}

create_user_repositories_dir() {
    im_root \
        && create_dir_if_needed /root/$(repository_dir_name) \
        || create_dir_if_needed /home/$(whoami)/$(repository_dir_name)
}

repositories_dir() {
    running_in_src_tree \
        && create_dir_if_needed $(top_level_path)/$(repository_dir_name) \
        || create_user_repositories_dir
}

verify_params() {
    [[ -z $PROJECTS && -z $PROJECT_PATH ]] \
        && eexit "project name or project path need to be provided. None was given."

    check_project_path
    verify_target_build_host
    check_gentoo_commands
}

show_build_info() {
    vinfo "Target build host $(color red)$(target_build_host)$(no_color) is $(target_os_with_color)"
    vinfo "Building $(color blue)$(package_type)$(no_color) package for $(target_os_with_color)"
}

file_containing_dir() {
    local f=$1

    dirname $(realpath $f)
}

sources_root_dir() {
    pwd
}

main() {
    cmdline $(args)

    local host
    local project

    local src_root_dir=$(sources_root_dir)

    vinfo "Building on hosts: $TARGET_BUILD_HOSTS"
    for host in $TARGET_BUILD_HOSTS
    do
        TARGET_BUILD_HOST=$host

        for project in $PROJECTS
        do
            PROJECT_NAME=$project
            exit_if_project_not_found \
                $project \
                $src_root_dir

            PROJECT_CMAKE_FILE=$(cmake_project_file $project)
            PROJECT_PATH=$(file_containing_dir $PROJECT_CMAKE_FILE)

            load_configuration_files
            vinfo "top_level_path=$(top_level_path)"

            readonly REPOSITORIES_NAMES
            readonly CMAKE_OPTIONS
            readonly PORTAGE_TREE
            readonly PORTAGE_TREE_NAME
            readonly PRE_COMPILE_DEPEND

            verify_params
            show_build_info
            create_$(package_type)_package
        done
    done
}
main
