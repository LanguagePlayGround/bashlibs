#!/bin/bash
[[ -d $(pwd)/$(dirname $0)/../src ]] \
    && export BASHLIBS_SOURCE_TREE=$(pwd)/$(dirname $0)/.. \
    && $($(dirname $0)/bashlibs --load-base) \
    || $(bashlibs --load-base)
include package_build.sh
include verbose.sh

cmdline() {
    check_source_dir
}

workdir() {
    create_dir_if_needed \
        $(tmp_dir)/$(get_tbz_filename_prefix)
}

get_dir_project_name() {
	basename $(package_source_dir)
}

get_tbz_filename_prefix() {
	echo $(cmake_project_name)-$(app_version)-Source
}

get_tbz_filename() {
	echo $(get_tbz_filename_prefix).tar.bz2
}

clean_tmp_dirs() {
    [[ $(tmp_dir) =~ /tmp/ ]] \
        && [[ -d $(tmp_dir) ]] \
        && rm -Rf $(tmp_dir)
}

copy_sources_to_workdir() {
    cd $(package_source_dir)
    rsync -r --exclude=*swp * $(workdir)/
    cd - > /dev/null 2>&1
}

tar_sources() {
    local f=/usr/portage/distfiles/$(get_tbz_filename)

    cd $(tmp_dir)
	tar cjf $f * \
	    && echo "File $f created."
    cd - > /dev/null 2>&1
}

keep_package() {
    local archive=$(progdir)/../gentoo/distfiles

    mkdir -p $archive
	cp /usr/portage/distfiles/$(get_tbz_filename) $archive
}

main() {
    cmdline
	clean_tmp_dirs
	gen_changelog
    copy_sources_to_workdir
    tar_sources
    keep_package
	clean_tmp_dirs
}
main
